// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/Server/DataCenter_AppGrpcService.proto
// </auto-generated>
// Original file comments:
// 语法结构，使用pb3
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SmartLibrary.DataCenter {
  public static partial class DatabaseCollectKindGrpcService
  {
    static readonly string __ServiceName = "SmartLibrary.DataCenter.DatabaseCollectKindGrpcService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::SmartLibrary.DataCenter.AllDatabaseCollectKindRequest> __Marshaller_SmartLibrary_DataCenter_AllDatabaseCollectKindRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SmartLibrary.DataCenter.AllDatabaseCollectKindRequest.Parser));
    static readonly grpc::Marshaller<global::SmartLibrary.DataCenter.AllDatabaseCollectKindResponse> __Marshaller_SmartLibrary_DataCenter_AllDatabaseCollectKindResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SmartLibrary.DataCenter.AllDatabaseCollectKindResponse.Parser));

    static readonly grpc::Method<global::SmartLibrary.DataCenter.AllDatabaseCollectKindRequest, global::SmartLibrary.DataCenter.AllDatabaseCollectKindResponse> __Method_GetAllDatabaseCollectKindResource = new grpc::Method<global::SmartLibrary.DataCenter.AllDatabaseCollectKindRequest, global::SmartLibrary.DataCenter.AllDatabaseCollectKindResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllDatabaseCollectKindResource",
        __Marshaller_SmartLibrary_DataCenter_AllDatabaseCollectKindRequest,
        __Marshaller_SmartLibrary_DataCenter_AllDatabaseCollectKindResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SmartLibrary.DataCenter.DataCenterAppGrpcServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DatabaseCollectKindGrpcService</summary>
    [grpc::BindServiceMethod(typeof(DatabaseCollectKindGrpcService), "BindService")]
    public abstract partial class DatabaseCollectKindGrpcServiceBase
    {
      /// <summary>
      ///获取当前owner所有可用的数据库，包含已购买的，纸本的，和公共的
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SmartLibrary.DataCenter.AllDatabaseCollectKindResponse> GetAllDatabaseCollectKindResource(global::SmartLibrary.DataCenter.AllDatabaseCollectKindRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DatabaseCollectKindGrpcServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAllDatabaseCollectKindResource, serviceImpl.GetAllDatabaseCollectKindResource).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DatabaseCollectKindGrpcServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAllDatabaseCollectKindResource, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SmartLibrary.DataCenter.AllDatabaseCollectKindRequest, global::SmartLibrary.DataCenter.AllDatabaseCollectKindResponse>(serviceImpl.GetAllDatabaseCollectKindResource));
    }

  }
  public static partial class DomainInfoService
  {
    static readonly string __ServiceName = "SmartLibrary.DataCenter.DomainInfoService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::SmartLibrary.DataCenter.AllDomainInfoTreeRequest> __Marshaller_SmartLibrary_DataCenter_AllDomainInfoTreeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SmartLibrary.DataCenter.AllDomainInfoTreeRequest.Parser));
    static readonly grpc::Marshaller<global::SmartLibrary.DataCenter.AllDomainInfoTreeReply> __Marshaller_SmartLibrary_DataCenter_AllDomainInfoTreeReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SmartLibrary.DataCenter.AllDomainInfoTreeReply.Parser));

    static readonly grpc::Method<global::SmartLibrary.DataCenter.AllDomainInfoTreeRequest, global::SmartLibrary.DataCenter.AllDomainInfoTreeReply> __Method_GetAllDomainInfoTrees = new grpc::Method<global::SmartLibrary.DataCenter.AllDomainInfoTreeRequest, global::SmartLibrary.DataCenter.AllDomainInfoTreeReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllDomainInfoTrees",
        __Marshaller_SmartLibrary_DataCenter_AllDomainInfoTreeRequest,
        __Marshaller_SmartLibrary_DataCenter_AllDomainInfoTreeReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SmartLibrary.DataCenter.DataCenterAppGrpcServiceReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of DomainInfoService</summary>
    [grpc::BindServiceMethod(typeof(DomainInfoService), "BindService")]
    public abstract partial class DomainInfoServiceBase
    {
      /// <summary>
      ///获取当前owner所有可用的数据库，包含已购买的，纸本的，和公共的
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SmartLibrary.DataCenter.AllDomainInfoTreeReply> GetAllDomainInfoTrees(global::SmartLibrary.DataCenter.AllDomainInfoTreeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DomainInfoServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAllDomainInfoTrees, serviceImpl.GetAllDomainInfoTrees).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DomainInfoServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAllDomainInfoTrees, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SmartLibrary.DataCenter.AllDomainInfoTreeRequest, global::SmartLibrary.DataCenter.AllDomainInfoTreeReply>(serviceImpl.GetAllDomainInfoTrees));
    }

  }
  public static partial class ProviderResourceGrpcService
  {
    static readonly string __ServiceName = "SmartLibrary.DataCenter.ProviderResourceGrpcService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::SmartLibrary.DataCenter.AvailableProviderResourceRequest> __Marshaller_SmartLibrary_DataCenter_AvailableProviderResourceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SmartLibrary.DataCenter.AvailableProviderResourceRequest.Parser));
    static readonly grpc::Marshaller<global::SmartLibrary.DataCenter.AvailableProviderResourceResponse> __Marshaller_SmartLibrary_DataCenter_AvailableProviderResourceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SmartLibrary.DataCenter.AvailableProviderResourceResponse.Parser));
    static readonly grpc::Marshaller<global::SmartLibrary.DataCenter.GetAllDatabaseProviderRequest> __Marshaller_SmartLibrary_DataCenter_GetAllDatabaseProviderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SmartLibrary.DataCenter.GetAllDatabaseProviderRequest.Parser));
    static readonly grpc::Marshaller<global::SmartLibrary.DataCenter.GetAllDatabaseProviderResponse> __Marshaller_SmartLibrary_DataCenter_GetAllDatabaseProviderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SmartLibrary.DataCenter.GetAllDatabaseProviderResponse.Parser));
    static readonly grpc::Marshaller<global::SmartLibrary.DataCenter.GetResourceAlbumByProviderRequest> __Marshaller_SmartLibrary_DataCenter_GetResourceAlbumByProviderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SmartLibrary.DataCenter.GetResourceAlbumByProviderRequest.Parser));
    static readonly grpc::Marshaller<global::SmartLibrary.DataCenter.GetResourceAlbumByProviderResponse> __Marshaller_SmartLibrary_DataCenter_GetResourceAlbumByProviderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SmartLibrary.DataCenter.GetResourceAlbumByProviderResponse.Parser));

    static readonly grpc::Method<global::SmartLibrary.DataCenter.AvailableProviderResourceRequest, global::SmartLibrary.DataCenter.AvailableProviderResourceResponse> __Method_GetAllAvailableProviderResource = new grpc::Method<global::SmartLibrary.DataCenter.AvailableProviderResourceRequest, global::SmartLibrary.DataCenter.AvailableProviderResourceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllAvailableProviderResource",
        __Marshaller_SmartLibrary_DataCenter_AvailableProviderResourceRequest,
        __Marshaller_SmartLibrary_DataCenter_AvailableProviderResourceResponse);

    static readonly grpc::Method<global::SmartLibrary.DataCenter.GetAllDatabaseProviderRequest, global::SmartLibrary.DataCenter.GetAllDatabaseProviderResponse> __Method_GetAllDatabaseProvider = new grpc::Method<global::SmartLibrary.DataCenter.GetAllDatabaseProviderRequest, global::SmartLibrary.DataCenter.GetAllDatabaseProviderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllDatabaseProvider",
        __Marshaller_SmartLibrary_DataCenter_GetAllDatabaseProviderRequest,
        __Marshaller_SmartLibrary_DataCenter_GetAllDatabaseProviderResponse);

    static readonly grpc::Method<global::SmartLibrary.DataCenter.GetResourceAlbumByProviderRequest, global::SmartLibrary.DataCenter.GetResourceAlbumByProviderResponse> __Method_GetResourceAlbumByProvider = new grpc::Method<global::SmartLibrary.DataCenter.GetResourceAlbumByProviderRequest, global::SmartLibrary.DataCenter.GetResourceAlbumByProviderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetResourceAlbumByProvider",
        __Marshaller_SmartLibrary_DataCenter_GetResourceAlbumByProviderRequest,
        __Marshaller_SmartLibrary_DataCenter_GetResourceAlbumByProviderResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SmartLibrary.DataCenter.DataCenterAppGrpcServiceReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of ProviderResourceGrpcService</summary>
    [grpc::BindServiceMethod(typeof(ProviderResourceGrpcService), "BindService")]
    public abstract partial class ProviderResourceGrpcServiceBase
    {
      /// <summary>
      ///获取当前owner所有可用的数据库，包含已购买的，纸本的，和公共的
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SmartLibrary.DataCenter.AvailableProviderResourceResponse> GetAllAvailableProviderResource(global::SmartLibrary.DataCenter.AvailableProviderResourceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SmartLibrary.DataCenter.GetAllDatabaseProviderResponse> GetAllDatabaseProvider(global::SmartLibrary.DataCenter.GetAllDatabaseProviderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SmartLibrary.DataCenter.GetResourceAlbumByProviderResponse> GetResourceAlbumByProvider(global::SmartLibrary.DataCenter.GetResourceAlbumByProviderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ProviderResourceGrpcServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAllAvailableProviderResource, serviceImpl.GetAllAvailableProviderResource)
          .AddMethod(__Method_GetAllDatabaseProvider, serviceImpl.GetAllDatabaseProvider)
          .AddMethod(__Method_GetResourceAlbumByProvider, serviceImpl.GetResourceAlbumByProvider).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ProviderResourceGrpcServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAllAvailableProviderResource, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SmartLibrary.DataCenter.AvailableProviderResourceRequest, global::SmartLibrary.DataCenter.AvailableProviderResourceResponse>(serviceImpl.GetAllAvailableProviderResource));
      serviceBinder.AddMethod(__Method_GetAllDatabaseProvider, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SmartLibrary.DataCenter.GetAllDatabaseProviderRequest, global::SmartLibrary.DataCenter.GetAllDatabaseProviderResponse>(serviceImpl.GetAllDatabaseProvider));
      serviceBinder.AddMethod(__Method_GetResourceAlbumByProvider, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SmartLibrary.DataCenter.GetResourceAlbumByProviderRequest, global::SmartLibrary.DataCenter.GetResourceAlbumByProviderResponse>(serviceImpl.GetResourceAlbumByProvider));
    }

  }
  public static partial class SourceTypeGrpcService
  {
    static readonly string __ServiceName = "SmartLibrary.DataCenter.SourceTypeGrpcService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::SmartLibrary.DataCenter.AllSourceRequest> __Marshaller_SmartLibrary_DataCenter_AllSourceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SmartLibrary.DataCenter.AllSourceRequest.Parser));
    static readonly grpc::Marshaller<global::SmartLibrary.DataCenter.AllSourceReply> __Marshaller_SmartLibrary_DataCenter_AllSourceReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SmartLibrary.DataCenter.AllSourceReply.Parser));
    static readonly grpc::Marshaller<global::SmartLibrary.DataCenter.AddSourceTypeRequest> __Marshaller_SmartLibrary_DataCenter_AddSourceTypeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SmartLibrary.DataCenter.AddSourceTypeRequest.Parser));
    static readonly grpc::Marshaller<global::SmartLibrary.DataCenter.SourceTypeItem> __Marshaller_SmartLibrary_DataCenter_SourceTypeItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SmartLibrary.DataCenter.SourceTypeItem.Parser));

    static readonly grpc::Method<global::SmartLibrary.DataCenter.AllSourceRequest, global::SmartLibrary.DataCenter.AllSourceReply> __Method_GetAllSourceType = new grpc::Method<global::SmartLibrary.DataCenter.AllSourceRequest, global::SmartLibrary.DataCenter.AllSourceReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllSourceType",
        __Marshaller_SmartLibrary_DataCenter_AllSourceRequest,
        __Marshaller_SmartLibrary_DataCenter_AllSourceReply);

    static readonly grpc::Method<global::SmartLibrary.DataCenter.AddSourceTypeRequest, global::SmartLibrary.DataCenter.SourceTypeItem> __Method_AddSourceType = new grpc::Method<global::SmartLibrary.DataCenter.AddSourceTypeRequest, global::SmartLibrary.DataCenter.SourceTypeItem>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddSourceType",
        __Marshaller_SmartLibrary_DataCenter_AddSourceTypeRequest,
        __Marshaller_SmartLibrary_DataCenter_SourceTypeItem);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SmartLibrary.DataCenter.DataCenterAppGrpcServiceReflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of SourceTypeGrpcService</summary>
    [grpc::BindServiceMethod(typeof(SourceTypeGrpcService), "BindService")]
    public abstract partial class SourceTypeGrpcServiceBase
    {
      /// <summary>
      ///获取当前owner所有可用的数据库，包含已购买的，纸本的，和公共的
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SmartLibrary.DataCenter.AllSourceReply> GetAllSourceType(global::SmartLibrary.DataCenter.AllSourceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SmartLibrary.DataCenter.SourceTypeItem> AddSourceType(global::SmartLibrary.DataCenter.AddSourceTypeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SourceTypeGrpcServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAllSourceType, serviceImpl.GetAllSourceType)
          .AddMethod(__Method_AddSourceType, serviceImpl.AddSourceType).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SourceTypeGrpcServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAllSourceType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SmartLibrary.DataCenter.AllSourceRequest, global::SmartLibrary.DataCenter.AllSourceReply>(serviceImpl.GetAllSourceType));
      serviceBinder.AddMethod(__Method_AddSourceType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SmartLibrary.DataCenter.AddSourceTypeRequest, global::SmartLibrary.DataCenter.SourceTypeItem>(serviceImpl.AddSourceType));
    }

  }
}
#endregion
