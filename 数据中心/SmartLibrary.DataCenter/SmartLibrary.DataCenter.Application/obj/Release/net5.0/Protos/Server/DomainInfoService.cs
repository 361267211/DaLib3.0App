// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/Server/DomainInfoService.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SmartLibraryDomain {

  /// <summary>Holder for reflection information generated from Protos/Server/DomainInfoService.proto</summary>
  public static partial class DomainInfoServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/Server/DomainInfoService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DomainInfoServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVQcm90b3MvU2VydmVyL0RvbWFpbkluZm9TZXJ2aWNlLnByb3RvEhJTbWFy",
            "dExpYnJhcnlEb21haW4i9wEKDkRvbWFpblRyZWVJdGVtEhAKCERvbWFpbklE",
            "GAEgASgFEhAKCFBhcmVudElEGAIgASgFEhQKDERvbWFpbklEQ29kZRgDIAEo",
            "CRISCgpEb21haW5OYW1lGAQgASgJEhAKCENvbnRyYXN0GAUgASgJEg0KBUxl",
            "dmVsGAYgASgFEgwKBE1hcmsYByABKAkSDAoEVHlwZRgIIAEoBRISCgpDcmVh",
            "dGVUeXBlGAkgASgJEg8KB1VzZXJLZXkYCiABKAkSNQoJTmV4dE5vZGVzGAsg",
            "AygLMiIuU21hcnRMaWJyYXJ5RG9tYWluLkRvbWFpblRyZWVJdGVtIlEKFkFs",
            "bERvbWFpbkluZm9UcmVlUmVwbHkSNwoLRG9tYWluVHJlZXMYASADKAsyIi5T",
            "bWFydExpYnJhcnlEb21haW4uRG9tYWluVHJlZUl0ZW0iNwoYQWxsRG9tYWlu",
            "SW5mb1RyZWVSZXF1ZXN0EgwKBHR5cGUYASABKAUSDQoFbGV2ZWwYAiABKAUy",
            "hgEKEURvbWFpbkluZm9TZXJ2aWNlEnEKFUdldEFsbERvbWFpbkluZm9UcmVl",
            "cxIsLlNtYXJ0TGlicmFyeURvbWFpbi5BbGxEb21haW5JbmZvVHJlZVJlcXVl",
            "c3QaKi5TbWFydExpYnJhcnlEb21haW4uQWxsRG9tYWluSW5mb1RyZWVSZXBs",
            "eWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SmartLibraryDomain.DomainTreeItem), global::SmartLibraryDomain.DomainTreeItem.Parser, new[]{ "DomainID", "ParentID", "DomainIDCode", "DomainName", "Contrast", "Level", "Mark", "Type", "CreateType", "UserKey", "NextNodes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmartLibraryDomain.AllDomainInfoTreeReply), global::SmartLibraryDomain.AllDomainInfoTreeReply.Parser, new[]{ "DomainTrees" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SmartLibraryDomain.AllDomainInfoTreeRequest), global::SmartLibraryDomain.AllDomainInfoTreeRequest.Parser, new[]{ "Type", "Level" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DomainTreeItem : pb::IMessage<DomainTreeItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DomainTreeItem> _parser = new pb::MessageParser<DomainTreeItem>(() => new DomainTreeItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DomainTreeItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmartLibraryDomain.DomainInfoServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainTreeItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainTreeItem(DomainTreeItem other) : this() {
      domainID_ = other.domainID_;
      parentID_ = other.parentID_;
      domainIDCode_ = other.domainIDCode_;
      domainName_ = other.domainName_;
      contrast_ = other.contrast_;
      level_ = other.level_;
      mark_ = other.mark_;
      type_ = other.type_;
      createType_ = other.createType_;
      userKey_ = other.userKey_;
      nextNodes_ = other.nextNodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainTreeItem Clone() {
      return new DomainTreeItem(this);
    }

    /// <summary>Field number for the "DomainID" field.</summary>
    public const int DomainIDFieldNumber = 1;
    private int domainID_;
    /// <summary>
    ///学科编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DomainID {
      get { return domainID_; }
      set {
        domainID_ = value;
      }
    }

    /// <summary>Field number for the "ParentID" field.</summary>
    public const int ParentIDFieldNumber = 2;
    private int parentID_;
    /// <summary>
    ///父级编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentID {
      get { return parentID_; }
      set {
        parentID_ = value;
      }
    }

    /// <summary>Field number for the "DomainIDCode" field.</summary>
    public const int DomainIDCodeFieldNumber = 3;
    private string domainIDCode_ = "";
    /// <summary>
    ///学科标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DomainIDCode {
      get { return domainIDCode_; }
      set {
        domainIDCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DomainName" field.</summary>
    public const int DomainNameFieldNumber = 4;
    private string domainName_ = "";
    /// <summary>
    ///学科名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DomainName {
      get { return domainName_; }
      set {
        domainName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Contrast" field.</summary>
    public const int ContrastFieldNumber = 5;
    private string contrast_ = "";
    /// <summary>
    ///中图对照
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Contrast {
      get { return contrast_; }
      set {
        contrast_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 6;
    private int level_;
    /// <summary>
    ///学科等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Mark" field.</summary>
    public const int MarkFieldNumber = 7;
    private string mark_ = "";
    /// <summary>
    ///说明
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mark {
      get { return mark_; }
      set {
        mark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 8;
    private int type_;
    /// <summary>
    ///类型 1-学科   2-中图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "CreateType" field.</summary>
    public const int CreateTypeFieldNumber = 9;
    private string createType_ = "";
    /// <summary>
    ///创建类型 0 系统 1-自建
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateType {
      get { return createType_; }
      set {
        createType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserKey" field.</summary>
    public const int UserKeyFieldNumber = 10;
    private string userKey_ = "";
    /// <summary>
    ///创建者标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserKey {
      get { return userKey_; }
      set {
        userKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NextNodes" field.</summary>
    public const int NextNodesFieldNumber = 11;
    private static readonly pb::FieldCodec<global::SmartLibraryDomain.DomainTreeItem> _repeated_nextNodes_codec
        = pb::FieldCodec.ForMessage(90, global::SmartLibraryDomain.DomainTreeItem.Parser);
    private readonly pbc::RepeatedField<global::SmartLibraryDomain.DomainTreeItem> nextNodes_ = new pbc::RepeatedField<global::SmartLibraryDomain.DomainTreeItem>();
    /// <summary>
    ///下一级的所有学科
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmartLibraryDomain.DomainTreeItem> NextNodes {
      get { return nextNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DomainTreeItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DomainTreeItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DomainID != other.DomainID) return false;
      if (ParentID != other.ParentID) return false;
      if (DomainIDCode != other.DomainIDCode) return false;
      if (DomainName != other.DomainName) return false;
      if (Contrast != other.Contrast) return false;
      if (Level != other.Level) return false;
      if (Mark != other.Mark) return false;
      if (Type != other.Type) return false;
      if (CreateType != other.CreateType) return false;
      if (UserKey != other.UserKey) return false;
      if(!nextNodes_.Equals(other.nextNodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DomainID != 0) hash ^= DomainID.GetHashCode();
      if (ParentID != 0) hash ^= ParentID.GetHashCode();
      if (DomainIDCode.Length != 0) hash ^= DomainIDCode.GetHashCode();
      if (DomainName.Length != 0) hash ^= DomainName.GetHashCode();
      if (Contrast.Length != 0) hash ^= Contrast.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Mark.Length != 0) hash ^= Mark.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (CreateType.Length != 0) hash ^= CreateType.GetHashCode();
      if (UserKey.Length != 0) hash ^= UserKey.GetHashCode();
      hash ^= nextNodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DomainID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DomainID);
      }
      if (ParentID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ParentID);
      }
      if (DomainIDCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DomainIDCode);
      }
      if (DomainName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DomainName);
      }
      if (Contrast.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Contrast);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Level);
      }
      if (Mark.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Mark);
      }
      if (Type != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Type);
      }
      if (CreateType.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CreateType);
      }
      if (UserKey.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UserKey);
      }
      nextNodes_.WriteTo(output, _repeated_nextNodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DomainID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DomainID);
      }
      if (ParentID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ParentID);
      }
      if (DomainIDCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DomainIDCode);
      }
      if (DomainName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DomainName);
      }
      if (Contrast.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Contrast);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Level);
      }
      if (Mark.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Mark);
      }
      if (Type != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Type);
      }
      if (CreateType.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CreateType);
      }
      if (UserKey.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UserKey);
      }
      nextNodes_.WriteTo(ref output, _repeated_nextNodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DomainID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DomainID);
      }
      if (ParentID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentID);
      }
      if (DomainIDCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DomainIDCode);
      }
      if (DomainName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DomainName);
      }
      if (Contrast.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contrast);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Mark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mark);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (CreateType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateType);
      }
      if (UserKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserKey);
      }
      size += nextNodes_.CalculateSize(_repeated_nextNodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DomainTreeItem other) {
      if (other == null) {
        return;
      }
      if (other.DomainID != 0) {
        DomainID = other.DomainID;
      }
      if (other.ParentID != 0) {
        ParentID = other.ParentID;
      }
      if (other.DomainIDCode.Length != 0) {
        DomainIDCode = other.DomainIDCode;
      }
      if (other.DomainName.Length != 0) {
        DomainName = other.DomainName;
      }
      if (other.Contrast.Length != 0) {
        Contrast = other.Contrast;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Mark.Length != 0) {
        Mark = other.Mark;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.CreateType.Length != 0) {
        CreateType = other.CreateType;
      }
      if (other.UserKey.Length != 0) {
        UserKey = other.UserKey;
      }
      nextNodes_.Add(other.nextNodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DomainID = input.ReadInt32();
            break;
          }
          case 16: {
            ParentID = input.ReadInt32();
            break;
          }
          case 26: {
            DomainIDCode = input.ReadString();
            break;
          }
          case 34: {
            DomainName = input.ReadString();
            break;
          }
          case 42: {
            Contrast = input.ReadString();
            break;
          }
          case 48: {
            Level = input.ReadInt32();
            break;
          }
          case 58: {
            Mark = input.ReadString();
            break;
          }
          case 64: {
            Type = input.ReadInt32();
            break;
          }
          case 74: {
            CreateType = input.ReadString();
            break;
          }
          case 82: {
            UserKey = input.ReadString();
            break;
          }
          case 90: {
            nextNodes_.AddEntriesFrom(input, _repeated_nextNodes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DomainID = input.ReadInt32();
            break;
          }
          case 16: {
            ParentID = input.ReadInt32();
            break;
          }
          case 26: {
            DomainIDCode = input.ReadString();
            break;
          }
          case 34: {
            DomainName = input.ReadString();
            break;
          }
          case 42: {
            Contrast = input.ReadString();
            break;
          }
          case 48: {
            Level = input.ReadInt32();
            break;
          }
          case 58: {
            Mark = input.ReadString();
            break;
          }
          case 64: {
            Type = input.ReadInt32();
            break;
          }
          case 74: {
            CreateType = input.ReadString();
            break;
          }
          case 82: {
            UserKey = input.ReadString();
            break;
          }
          case 90: {
            nextNodes_.AddEntriesFrom(ref input, _repeated_nextNodes_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AllDomainInfoTreeReply : pb::IMessage<AllDomainInfoTreeReply>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AllDomainInfoTreeReply> _parser = new pb::MessageParser<AllDomainInfoTreeReply>(() => new AllDomainInfoTreeReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllDomainInfoTreeReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmartLibraryDomain.DomainInfoServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllDomainInfoTreeReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllDomainInfoTreeReply(AllDomainInfoTreeReply other) : this() {
      domainTrees_ = other.domainTrees_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllDomainInfoTreeReply Clone() {
      return new AllDomainInfoTreeReply(this);
    }

    /// <summary>Field number for the "DomainTrees" field.</summary>
    public const int DomainTreesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SmartLibraryDomain.DomainTreeItem> _repeated_domainTrees_codec
        = pb::FieldCodec.ForMessage(10, global::SmartLibraryDomain.DomainTreeItem.Parser);
    private readonly pbc::RepeatedField<global::SmartLibraryDomain.DomainTreeItem> domainTrees_ = new pbc::RepeatedField<global::SmartLibraryDomain.DomainTreeItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SmartLibraryDomain.DomainTreeItem> DomainTrees {
      get { return domainTrees_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllDomainInfoTreeReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllDomainInfoTreeReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!domainTrees_.Equals(other.domainTrees_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= domainTrees_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      domainTrees_.WriteTo(output, _repeated_domainTrees_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      domainTrees_.WriteTo(ref output, _repeated_domainTrees_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += domainTrees_.CalculateSize(_repeated_domainTrees_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllDomainInfoTreeReply other) {
      if (other == null) {
        return;
      }
      domainTrees_.Add(other.domainTrees_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            domainTrees_.AddEntriesFrom(input, _repeated_domainTrees_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            domainTrees_.AddEntriesFrom(ref input, _repeated_domainTrees_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AllDomainInfoTreeRequest : pb::IMessage<AllDomainInfoTreeRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AllDomainInfoTreeRequest> _parser = new pb::MessageParser<AllDomainInfoTreeRequest>(() => new AllDomainInfoTreeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllDomainInfoTreeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SmartLibraryDomain.DomainInfoServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllDomainInfoTreeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllDomainInfoTreeRequest(AllDomainInfoTreeRequest other) : this() {
      type_ = other.type_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllDomainInfoTreeRequest Clone() {
      return new AllDomainInfoTreeRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllDomainInfoTreeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllDomainInfoTreeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllDomainInfoTreeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
